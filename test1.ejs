<%- include("../../views/partials/user/header") %>

<div class="container mt-5">
  
  <h1 class="mb-4">Your Cart</h1>
  <div class="mb-4">
    <h4>Shipping Address</h4>
    
    <% if (user.defaultAddress) { %>
      <% const defaultAddress = user.addresses.find(addr => addr._id.toString() === user.defaultAddress.toString()); %>
      <% if (defaultAddress) { %>
        <p>
          <%= defaultAddress.fullName %>, <%= defaultAddress.address %>, <%= defaultAddress.city %>, <%= defaultAddress.country %> - <%= defaultAddress.postalCode %>
        </p>
      <% } else { %>
        <p>No default address set. Please <a href="/profile">add an address</a>.</p>
      <% } %>
      <button id="change-address-btn" class="btn btn-outline-primary" onclick="window.location.href='/user/addresses'">Change Address</button>
    <% } else { %>
      <p>No default address set. Please <a href="/profile">add an address</a>.</p>
    <% } %>
  </div>
  
  <% if (cart.length > 0) { %>
    <table class="table">
      <thead>
        <tr>
          <th>Image</th>
          <th>Product</th>
          <th>Price(before adding offer)</th>
          <th>Price(after offer added)</th>
          <th>Quantity</th>
          <th>Total</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% cart.forEach(item => { %>
          <tr data-item-id="<%= item._id %>" data-product-id="<%= item.product._id %>">
            <td> <img src="/uploads/product-images/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" width="100" height="100"></td>
            
            <td><%= item.product.productName %></td>
            <td id="prize">Rs <%=item.product.regularPrice%></td>
            <td id="prize">Rs <%=item.product.salePrice%></td>
            <td>
              <button class="btn btn-outline-secondary update-quantity" data-action="decrease">-</button>
              <span class="quantity-value"><%= item.quantity %></span>
              <button class="btn btn-outline-secondary update-quantity" data-action="increase">+</button>
            </td>
            <td class="product-total" data-product-price="<%=item.product.salePrice*item.quantity %>">Rs <%= (item.product.salePrice * item.quantity).toFixed(2) %></td>

            <td>
              <form action="/cart/remove/<%= item.product._id %>" method="POST" onclick="remove-cart">
                <button type="button" class="btn btn-danger btn-sm" onclick="confirmRemove(this)">
                  <i class="fas fa-trash-alt"></i> Remove
              </button>
               
               
              </form>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
    <div class="text-end">
      <div class="text-end" id="cart-total">GrandTotal: Rs <%= cartTotal.toFixed(2) %></div>

      <a href="/order/checkout/" class="btn btn-success" id="checkout-btn" >Proceed to Checkout</a>
    </div>
  <% } else { %>
    <p>Your cart is empty. <a href="/products">Continue shopping</a>.</p>
  <% } %>
</div>

</div>

<%- include("../../views/partials/user/footer") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
 
  // Select all buttons with the class update-quantity

  
    document.addEventListener('DOMContentLoaded', function() {
      // Select all quantity update buttons
      const quantityButtons = document.querySelectorAll('.update-quantity');
    
      quantityButtons.forEach(button => {
        button.addEventListener('click', function() {
          const action = this.getAttribute('data-action'); // 'increase' or 'decrease'
          const productRow = this.closest('tr'); // Get the row for this product
          const quantitySpan = productRow.querySelector('.quantity-value'); // Get the quantity span
          const productTotal = productRow.querySelector('.product-total'); // Get the total price element for the product
          const productPrice = parseFloat(productRow.querySelector('.product-total').getAttribute('data-product-price')); // Get the product price
          
          let quantity = parseInt(quantitySpan.textContent); // Get current quantity
    
          // Increase or decrease quantity
          if (action === 'increase') {
            quantity++;
          } else if (action === 'decrease' && quantity > 1) { // Prevent quantity from going below 1
            quantity--;
          }
    
          // Update the quantity in the DOM
          quantitySpan.textContent = quantity;
          const itemId = this.closest('tr').dataset.itemId; 
          
          fetch(`/update-quantity/${itemId}`,{
            method:'POST',
            headers:{
              'Content-Type':'application/json'
            },
            body:JSON.stringify({quantity:quantity})

          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              console.log('Quantity updated successfully');
            }
          })
          .catch(error => {
            console.error('Error updating quantity:', error);
          });
    
          // Update the total price for the product
          const newProductTotal = (productPrice * quantity).toFixed(2);
          productTotal.textContent = ` Rs ${newProductTotal}`;
    
          // Recalculate the cart total
          updateCartTotal();
        });
      });
    
      // Function to recalculate the cart total
      function updateCartTotal() {
        let cartTotal = 0;
        const productTotals = document.querySelectorAll('.product-total');
    
        productTotals.forEach(product => {
          cartTotal += parseFloat(product.textContent.replace('Rs', '').trim());
        });
    
        // Update the cart total in the DOM
        document.getElementById('cart-total').textContent = `Total: Rs ${cartTotal.toFixed(2)}`;
      }
      function updateQuantityInCart(productId, quantity) {
        fetch('/cart/update-quantity', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId, quantity })
        })
        .then(response => response.json())
        .then(data => {
          if (!data.success) {
            console.error('Failed to update cart quantity');
          }
        })
        .catch(error => console.error('Error:', error));
      }
    });
    
    
  document.getElementById('checkout-btn').addEventListener('click',function(e){
    e.preventDefault();
    let updateCart=[];
    document.querySelectorAll('tbody tr').forEach(row=>{
      let productId=row.getAttribute('data-product-id');
      let quantity=parseInt(row.querySelector('.quantity-value').textContent);
      updateCart.push({
        productId:productId,
        quantity:quantity
      })

    })
    
    const queryString=updateCart.map(item=>`productId=${item.productId}&quantity=${item.quantity}`).join('&')
    window.location.href=`/order/checkout?${queryString}`;
  })

    function confirmRemove(button) {
      Swal.fire({
        title: "Are you sure?",
        text: "This item will be removed from your cart.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#dc3545",
        cancelButtonColor: "#6c757d",
        confirmButtonText: "Yes, remove it!"
      }).then((result) => {
        if (result.isConfirmed) {
          // Find the closest form element and submit it
          button.closest("form").submit();
        }
      });
    }
  
  
</script> 















<%- include("../../views/partials/user/header") %>

<div class="container mt-5">
  <div class="row">
    <div class="col-md-8">
  <h1 class="mb-4">Your Cart</h1>
  <div class="mb-4">
    <h4>Shipping Address</h4>
    
    <% if (user.defaultAddress) { %>
      <% const defaultAddress = user.addresses.find(addr => addr._id.toString() === user.defaultAddress.toString()); %>
      <% if (defaultAddress) { %>
        <p>
          <%= defaultAddress.fullName %>, <%= defaultAddress.address %>, <%= defaultAddress.city %>, <%= defaultAddress.country %> - <%= defaultAddress.postalCode %>
        </p>
      <% } else { %>
        <p>No default address set. Please <a href="/profile">add an address</a>.</p>
      <% } %>
      <button id="change-address-btn" class="btn btn-outline-primary" onclick="window.location.href='/user/addresses'">Change Address</button>
    <% } else { %>
      <p>No default address set. Please <a href="/profile">add an address</a>.</p>
    <% } %>
  </div>
  
  <% if (cart.length > 0) { %>
    <table class="table">
      <thead>
        <tr>
          <th>Image</th>
          <th>Product</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Total</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% cart.forEach(item => { %>
          <tr data-item-id="<%= item._id %>" data-product-id="<%= item.product._id %>">
            <td> <img src="/uploads/product-images/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" width="100" height="100"></td>
            
            <td><%= item.product.productName %></td>
            <td id="prize">Rs <%=item.product.salePrice%></td>
            <td>
              <button class="btn btn-outline-secondary update-quantity" data-action="decrease">-</button>
              <span class="quantity-value"><%= item.quantity %></span>
              <button class="btn btn-outline-secondary update-quantity" data-action="increase">+</button>
            </td>
            <td class="product-total" data-product-price="<%=item.product.salePrice*item.quantity %>">Rs <%= (item.product.salePrice * item.quantity).toFixed(2) %></td>

            <td>
              <form action="/cart/remove/<%= item.product._id %>" method="POST" onclick="remove-cart">
                <button type="button" class="btn btn-danger btn-sm" onclick="confirmRemove(this)">
                  <i class="fas fa-trash-alt"></i> Remove
              </button>
               
               
              </form>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
    <div class="text-end">
      <div class="text-end" id="cart-total">Total: Rs <%= cartTotal.toFixed(2) %></div>

      <a href="/order/checkout/" class="btn btn-success" id="checkout-btn" >Proceed to Checkout</a>
    </div>
  <% } else { %>
    <p>Your cart is empty. <a href="/products">Continue shopping</a>.</p>
  <% } %>
</div>
<div class="col-md-4">
  
  
</div> 
</div>

<%- include("../../views/partials/user/footer") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
 
  // Select all buttons with the class update-quantity

  
    document.addEventListener('DOMContentLoaded', function() {
      // Select all quantity update buttons
      const quantityButtons = document.querySelectorAll('.update-quantity');
    
      quantityButtons.forEach(button => {
        button.addEventListener('click', function() {
          const action = this.getAttribute('data-action'); // 'increase' or 'decrease'
          const productRow = this.closest('tr'); // Get the row for this product
          const quantitySpan = productRow.querySelector('.quantity-value'); // Get the quantity span
          const productTotal = productRow.querySelector('.product-total'); // Get the total price element for the product
          const productPrice = parseFloat(productRow.querySelector('.product-total').getAttribute('data-product-price')); // Get the product price
          const unitPrice = parseFloat(productRow.querySelector('#prize').textContent.replace('Rs ', '')); // Get the per-unit product price

          let quantity = parseInt(quantitySpan.textContent); // Get current quantity
    
          // Increase or decrease quantity
          if (action === 'increase') {
            quantity++;
          } else if (action === 'decrease' && quantity > 1) { // Prevent quantity from going below 1
            quantity--;
          }
    
          // Update the quantity in the DOM
          quantitySpan.textContent = quantity;
          const itemId = this.closest('tr').dataset.itemId; 
          
          fetch(`/update-quantity/${itemId}`,{
            method:'POST',
            headers:{
              'Content-Type':'application/json'
            },
            body:JSON.stringify({quantity:quantity})

          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              console.log('Quantity updated successfully');
            }
          })
          .catch(error => {
            console.error('Error updating quantity:', error);
          });
    
    
          // Update the total price for the product
          const newProductTotal = (unitPrice * quantity).toFixed(2);
          productTotal.textContent = ` Rs ${newProductTotal}`;
    
          // Recalculate the cart total
          updateCartTotal();
        });
      });
    
      // Function to recalculate the cart total
      function updateCartTotal() {
        let cartTotal = 0;
        const productTotals = document.querySelectorAll('.product-total');
    
        productTotals.forEach(product => {
          cartTotal += parseFloat(product.textContent.replace('Rs', '').trim());
        });
    
        // Update the cart total in the DOM
        document.getElementById('cart-total').textContent = `Total: Rs ${cartTotal.toFixed(2)}`;
        updateOrderSummary(cartTotal);
      }
      function updateOrderSummary(cartTotal) {
        const discount = calculateDiscount(cartTotal);
        const tax = calculateTax(cartTotal - discount);
        const grandTotal = cartTotal - discount + tax;
    
        document.getElementById('items-total').textContent = `Rs ${cartTotal.toFixed(2)}`;
        document.getElementById('discount').textContent = `Rs ${discount.toFixed(2)}`;
        document.getElementById('tax').textContent = `Rs 0`;
        document.getElementById('grand-total').textContent = `Rs ${grandTotal.toFixed(2)}`;
      }
    
     
    
      
      function updateQuantityInCart(productId, quantity) {
        fetch('/cart/update-quantity', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId, quantity })
        })
        .then(response => response.json())
        .then(data => {
          if (!data.success) {
            console.error('Failed to update cart quantity');
          }
        })
        .catch(error => console.error('Error:', error));
      }
    });
    
    
  document.getElementById('checkout-btn').addEventListener('click',function(e){
    e.preventDefault();
    let updateCart=[];
    document.querySelectorAll('tbody tr').forEach(row=>{
      let productId=row.getAttribute('data-product-id');
      let quantity=parseInt(row.querySelector('.quantity-value').textContent);
      updateCart.push({
        productId:productId,
        quantity:quantity
      })

    })
    
    const queryString=updateCart.map(item=>`productId=${item.productId}&quantity=${item.quantity}`).join('&')
    window.location.href=`/order/checkout?${queryString}`;
  })

    function confirmRemove(button) {
      Swal.fire({
        title: "Are you sure?",
        text: "This item will be removed from your cart.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#dc3545",
        cancelButtonColor: "#6c757d",
        confirmButtonText: "Yes, remove it!"
      }).then((result) => {
        if (result.isConfirmed) {
          // Find the closest form element and submit it
          button.closest("form").submit();
        }
      });
    }
  
  
</script> 





<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">



<link rel="stylesheet" href=
"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">



<script src=
"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js">
    </script>